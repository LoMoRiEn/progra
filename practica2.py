# -*- coding: utf-8 -*-
"""Practica2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FJS7CJhRkSXYKZOjEuQDfQbD7_H_uUqc
"""

#Practica 2
#Lopez Morales Ricardo Enrique
#Zuñiga Soto Saul
#Pregunta 1
import numpy as np

class SimulacionColas:
    """Esta clase simula la cola de un hospital,
    primero generando pacientes en un determinado tiempo,
    asignandolos a una lista y asociandolos con un tiempo de llegada"""
    def __init__(self, tiempo_total, tiempo_atencion):
        """Se inicializa la funcion con todas las variables a utilizar"""
        self.tiempo_total = tiempo_total
        self.tiempo_atencion = tiempo_atencion
        self.tiempo_actual = 0
        self.cola = []
        self.tiempo_atencion_sig = 0
        self.tiempo_cola = 0
        self.pacientes_atendidos = 0

    def simular(self):
        """Es la funcion principal que corre todas las demas funciones
         y da el resultado final"""
        self.generar_pacientes()
        self.atender_pacientes()
        self.calcular_promedio_cola()


    def generar_pacientes(self):
        """Esta funcion genera los pacientes y los mete todos a una cola,
        con un valor de llegada asociado"""
        tiempo_llegada_paciente = np.random.uniform(0.5, 50)
        while self.tiempo_actual < self.tiempo_total:
            self.cola.append(tiempo_llegada_paciente)
            self.tiempo_actual = tiempo_llegada_paciente
            tiempo_llegada_paciente += np.random.uniform(0.5, 50)

    def atender_pacientes(self):
        """Esta funcion simula la atencion de los pacientes,
        checando cada elemento de la cola"""
        for i in range(len(self.cola)):
            atencion = self.cola[i] + self.tiempo_atencion + self.tiempo_atencion_sig
            if i < len(self.cola) - 1:
                if atencion > self.cola[i + 1]:
                    self.tiempo_atencion_sig = atencion - self.cola[i + 1]
                    self.tiempo_cola += self.tiempo_atencion_sig
                    self.pacientes_atendidos += 1
                else:
                    self.tiempo_cola += 0
                    self.pacientes_atendidos += 1

    def calcular_promedio_cola(self):
        """Aqui se muestran las estadisticas finales dadas por las
        anteriores 2 funciones"""
        print("Pacientes atendidos en pregunta 1:", self.pacientes_atendidos)
        promedio_cola = self.tiempo_cola / self.pacientes_atendidos if self.pacientes_atendidos > 0 else 0
        print("Tiempo total en cola en pregunta 1:", self.tiempo_cola)
        print("Promedio de tiempo en cola por paciente en pregunta 1:", promedio_cola)


# Parámetros del sistema
tiempo_total = 1265000  # Tiempo en minutos para generar 50,000 pacientes
tiempo_atencion = 30  # minutos

# Crear y ejecutar la simulación
simulacion = SimulacionColas(tiempo_total, tiempo_atencion)
simulacion.simular()

#Pregunta 2
import numpy as np

class SimulacionColas:
    """Esta clase simula la cola de un hospital,
    primero generando pacientes en un determinado tiempo,
    asignandolos a una lista y asociandolos con un tiempo de llegada"""
    def __init__(self, tiempo_total, tiempo_atencion):
        """Se inicializa la funcion con todas las variables a utilizar"""
        self.tiempo_total = tiempo_total
        self.tiempo_atencion = tiempo_atencion
        self.tiempo_actual = 0
        self.cola = []
        self.tiempo_atencion_sig = 0
        self.tiempo_cola = 0
        self.pacientes_atendidos = 0

    def simular(self):
        """Es la funcion principal que corre todas las demas funciones
         y da el resultado final"""
        self.generar_pacientes()
        self.atender_pacientes()
        self.calcular_promedio_cola()


    def generar_pacientes(self):
        """Esta funcion genera los pacientes y los mete todos a una cola,
        con un valor de llegada asociado"""
        tiempo_llegada_paciente = np.random.uniform(0.5, 50)
        while self.tiempo_actual < self.tiempo_total:
            self.cola.append(tiempo_llegada_paciente)
            self.tiempo_actual = tiempo_llegada_paciente
            tiempo_llegada_paciente += np.random.uniform(0.5, 50)

    def atender_pacientes(self):
        """Esta funcion simula la atencion de los pacientes,
        checando cada elemento de la cola"""
        for i in range(len(self.cola)):
            atencion = self.cola[i] + self.tiempo_atencion + self.tiempo_atencion_sig
            if i < len(self.cola) - 1:
                if atencion > self.cola[i + 1]:
                    self.tiempo_atencion_sig = atencion - self.cola[i + 1]
                    self.tiempo_cola += self.tiempo_atencion_sig
                    self.pacientes_atendidos += 1
                else:
                    self.tiempo_cola += 0
                    self.pacientes_atendidos += 1

    def calcular_promedio_cola(self):
        """Aqui se muestran las estadisticas finales dadas por las
        anteriores 2 funciones"""
        print("Pacientes atendidos en pregunta 2:", self.pacientes_atendidos)
        promedio_cola = self.tiempo_cola / self.pacientes_atendidos if self.pacientes_atendidos > 0 else 0
        print("Tiempo total en cola en pregunta 2:", self.tiempo_cola)
        print("Promedio de tiempo en cola por paciente en pregunta 2:", promedio_cola)


# Parámetros del sistema
tiempo_total = 1265000  # Tiempo en minutos para generar 50,000 pacientes
tiempo_atencion = 20  # minutos

# Crear y ejecutar la simulación
simulacion = SimulacionColas(tiempo_total, tiempo_atencion)
simulacion.simular()

#Pregunta 3
import numpy as np

class SimulacionColas:
    """Esta clase simula la cola de un hospital,
    primero generando pacientes en un determinado tiempo,
    asignandolos a una lista y asociandolos con un tiempo de llegada,
    haciendo una diferenciacion entre pacientes de urgencia y
    pacientes rutinarios, dando prioridad a los urgentes"""
    def __init__(self, tiempo_total, tiempo_atencion):
        """Se inicializa la funcion con todas las variables a utilizar"""
        self.tiempo_total = tiempo_total
        self.tiempo_atencion = tiempo_atencion
        self.tiempo_actual = 0
        self.cola_rutina = []
        self.cola_urgencia = []
        self.tiempo_atencion_sig = 0
        self.tiempo_cola = 0
        self.pacientes_atendidos = 0
        self.urgente = 10

    def simular(self):
        """La funcion principal que corre todas las demas funciones a la vez"""
        self.generar_pacientes()
        self.atender_pacientes()
        self.mostrar_estadisticas()


    def generar_pacientes(self):
        """Esta funcion genera pacientes y con cierta probabilidad se les
        asigna estado de rutina o urgencia y se generan 2 colas separadas
        para ambos, con su respectivo valor de llegada"""
        tiempo_llegada_paciente = np.random.uniform(0.5, 50)
        while self.tiempo_actual < self.tiempo_total:
          if self.urgente <= 2:
            self.cola_urgencia.append(tiempo_llegada_paciente)
            self.tiempo_actual = tiempo_llegada_paciente
            tiempo_llegada_paciente += np.random.uniform(0.5, 50)
            self.urgente = np.random.uniform(0,10)

          else:
            self.cola_rutina.append(tiempo_llegada_paciente)
            self.tiempo_actual = tiempo_llegada_paciente
            tiempo_llegada_paciente += np.random.uniform(0.5, 50)
            self.urgente = np.random.uniform(0,10)


    def atender_pacientes(self):

        self.cola_urgencia.sort()
        self.cola_rutina.sort()
        atencion = self.cola_rutina[0] + tiempo_atencion + self.tiempo_atencion_sig
        self.tiempo_atencion_sig = atencion - self.cola_rutina[0]
        self.cola_rutina.pop(0)
        self.pacientes_atendidos += 1
        while self.cola_urgencia and self.cola_rutina:
          atencion = self.cola_rutina[0] + tiempo_atencion + self.tiempo_atencion_sig
          if atencion > self.cola_rutina[0] and atencion > self.cola_urgencia[0]:
            self.tiempo_atencion_sig = atencion - self.cola_urgencia[0]
            self.tiempo_cola += self.tiempo_atencion_sig
            atencion = self.cola_urgencia[0] + tiempo_atencion
            self.cola_urgencia.pop(0)
            self.pacientes_atendidos += 1
          elif atencion > self.cola_rutina[0] and atencion < self.cola_urgencia[0]:
            self.tiempo_atencion_sig = atencion - self.cola_rutina[0]
            self.tiempo_cola += self.tiempo_atencion_sig
            atencion = self.cola_rutina[0] + tiempo_atencion
            self.cola_rutina.pop(0)
            self.pacientes_atendidos += 1
          elif atencion < self.cola_rutina[0] and atencion > self.cola_urgencia[0]:
            self.tiempo_atencion_sig = atencion - self.cola_urgencia[0]
            self.tiempo_cola += self.tiempo_atencion_sig
            atencion = self.cola_urgencia[0] + tiempo_atencion
            self.cola_urgencia.pop(0)
            self.pacientes_atendidos += 1
          elif atencion < self.cola_rutina[0] and atencion < self.cola_urgencia[0]:
            if self.cola_rutina[0] < self.cola_urgencia[0]:
              self.tiempo_cola += 0
              atencion = self.cola_rutina[0] + tiempo_atencion
              self.cola_rutina.pop(0)
              self.pacientes_atendidos += 1
            else:
              self.tiempo_cola += 0
              atencion = self.cola_urgencia[0] + tiempo_atencion
              self.cola_urgencia.pop(0)
              self.pacientes_atendidos += 1


    def mostrar_estadisticas(self):
        """Esta funcion calcula y muestra las estadisticas a partir de los datos arrojados por las anteriores 2 funciones"""
        promedio_cola = self.tiempo_cola / self.pacientes_atendidos if self.pacientes_atendidos > 0 else 0
        print("Pacientes atendidos en pregunta 3:", self.pacientes_atendidos)
        print("Tiempo total en cola en pregunta 3:", self.tiempo_cola)
        print("Promedio de tiempo en cola por paciente en pregunta 3:", promedio_cola)


# Parámetros del sistema
tiempo_total = 1265000  # Tiempo para generar 50,000 pacientes
tiempo_atencion = 20  # minutos

# Crear y ejecutar la simulación
simulacion = SimulacionColas(tiempo_total, tiempo_atencion)
simulacion.simular()