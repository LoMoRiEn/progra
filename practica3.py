# -*- coding: utf-8 -*-
"""Practica3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uOl93wnML62qanMJif4jh9UbLY9oGgS0
"""

#Practica 3
#Lopez Morales Ricardo Enrique
#Zuñiga Soto Saul

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

class Trie:
  '''Esta clase codifica y decodifica mensajes en binario a traves de leer un
  archivo excel'''

  def __init__(self):
    '''Se inicializa la clase con todas las variables necesarias'''
    self.lista_1 = []
    self.lista_2 = []
    self.lista_3 = []
    self.lista_4 = []
    self.dicc = {}
    self.dics = {}

  def main(self):
    '''Metodo central, lee los demas metodos y los ejecuta'''
    self.lect()
    self.select()

  def menu(self):
    '''Interfaz del menu, da informacion al usuario'''
    print("Bienvenido:")
    print("1. Codificar un mensaje a binario")
    print("2. Decodificar un mensaje en binario")
    print("3. Salir")

  def select(self):
    '''Parte interactiva del menu, deja al usuario elegir entre que metodo desea
    usar'''
    self.menu()
    #El menu es perpetuo, se va a seguir pidiendo input del usuario hasta que
    #este decida salir del programa con la opcion 3
    while True:
        opcion = input("Elige una opción: ")
        if opcion == "1":
            self.codificacion()
        elif opcion == "2":
            self.decodificacion()
        elif opcion == "3":
            print("Saliendo del programa...")
            break
        else:
            print("Opción inválida. Por favor, elige una opción válida.")

  def lect(self):
    '''Este metodo lee el archivo que contiene el codigo para codificar, guarda
    todo en diccionarios, uno para codificar y otro para decodificar'''
    #El archivo debe tener nombre y columnas con los nombres especificos o no jala
    arch= pd.read_excel('/content/drive/MyDrive/Code.xlsx', dtype = str)
    Let = arch['Letters']
    Bin = arch['Binary coding']

    #Se leen las columnas y se guardan en 4 listas
    for i in Let:
      self.lista_1.append(i)
      self.lista_4.append(i)

    for i in Bin:
      self.lista_2.append(i)
      self.lista_3.append(i)

    #2 listas se juntan en un diccionario y las otras 2 en otro
    for key in self.lista_1:
      for value in self.lista_2:
        self.dicc[key] = value
        self.lista_2.remove(value)
        break

    for key in self.lista_3:
      for value in self.lista_4:
        self.dics[key] = value
        self.lista_4.remove(value)
        break

  def codificacion(self):
    '''Este metodo codifica cualquier cadena de caracteres a un codigo binario
    siempre que los caracteres existan en el archivo dado'''
    self.cadena = input("Introduzca una cadena: ")
    self.codigo = ""
    self.bool_1 = True

    #Se lee la cadena caracter por caracter y se agrega la traduccion de cada
    #caracter al codigo
    for i in self.cadena:
      if i in self.dicc:
        self.codigo = self.codigo + str(self.dicc[i])
      else:
        self.bool_1 = False

    if self.bool_1 == True:
      print("El mensaje traducido a binario es:", self.codigo)
    else:
      print("Los caracteres proporcionados no forman parte del codigo leido")


  def decodificacion(self):
    '''Este metodo decodifica cualquier cadena binaria a una cadena de caracteres
    siempre que se cumplan las condiciones para que el codigo sea valido'''
    self.code = input("Introduzca un codigo: ")
    #Se pasa la cadena a lista para mayor comodidad
    self.decr = [*self.code]
    self.decif = ""
    self.string = ""

    #La cadena pasada a lista se lee
    #Mientras la lista tenga elementos se continua el proceso
    while self.decr:
      if self.decif not in self.dics:
        self.decif = self.decif + str(self.decr[0])
        self.decr.pop(0)
      if self.decif in self.dics:
        self.string = self.string + self.dics[self.decif]
        self.decif = ""

    #Para que el codigo sea valido la cadena de decifrado debe quedar vacia
    if self.decif:
      print("El codigo es incorrecto/contiene caracteres que no son 0,1")
    else:
      print("El mensaje decodificado es:", self.string)


if __name__ == "__main__":

  Archivo = Trie()
  Archivo.main()